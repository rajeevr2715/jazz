#!groovy.
import groovy.json.JsonOutput
import java.text.SimpleDateFormat

/**Process** of service-onboarding-build-pack
-identify service type
-identify runtime
-checkout template
-make change to service-name in deployment-env.yml
-create repo
-add remote to git
-git push template to git
*/

//definitions
def Event_Name = [
	'VALIDATE_INPUT': 'VALIDATE_INPUT',
	'MODIFY_TEMPLATE':'MODIFY_TEMPLATE',
	'ADD_WRITE_PERMISSIONS_TO_SERVICE_REPO':'ADD_WRITE_PERMISSIONS_TO_SERVICE_REPO',
	'BUILD_MASTER_BRANCH':'BUILD_MASTER_BRANCH',
	'COMMIT_CODE':'COMMIT_CODE',
	'CREATE_SERVICE_REPO':'CREATE_SERVICE_REPO',
	'LOCK_MASTER_BRANCH':'LOCK_MASTER_BRANCH',
	'PUSH_TEMPLATE_TO_SERVICE_REPO':'PUSH_TEMPLATE_TO_SERVICE_REPO',
	'CLONE_TEMPLATE':'CLONE_TEMPLATE'
]
def Event_Status = [
	'STARTED':'STARTED',
	'COMPLETED':'COMPLETED',
	'FAILED':'FAILED'
]




node  {

	def service_type =  params.service_type
	def runtime = params.runtime
	def service_name = params.service_name
	def admin_group = "admin_group"
	def bitbucket_name = params.service_name
	def creator_username = env.BITBUCKET_USERNAME 
	def service_template
	def service_username
	def service_password
	def domain = params.domain
	def owner = ""
	if (params.username) {
		owner = params.username
	}

	def repo_protocol				= "http://"

	def var_credentialsId 			= env.REPO_CREDENTIAL_ID
	def var_bitbucket_base			= env.REPO_BASE
	def var_bitbucket_framework_url = repo_protocol + var_bitbucket_base + "/scm/" + env.REPO_CORE + "/"
	def var_api_key 				= env.API_KEY
	def var_api_host_name			= var_api_key+".execute-api.us-east-2.amazonaws.com"
	def var_cas_rest_repo 			= repo_protocol + var_bitbucket_base  + "/rest/api/1.0/projects/" + env.REPO_LOC + "/repos"
	def var_bitbucket_email 		= env.REPO_EMAIL
	def var_cas_clone_url	 		= var_bitbucket_base + "/scm/" + env.REPO_LOC + "/"
	def var_serviceonboarding_repo 	= repo_protocol + var_bitbucket_base + "/scm/" + env.REPO_CORE + "/service-onboarding-build-pack.git"
	def var_bitbucket_branch_perm	= repo_protocol + var_bitbucket_base + "/rest/branch-permissions/2.0/projects/" + env.REPO_LOC + "/repos/"
	def var_bitbucket_webhook_api	= repo_protocol + var_bitbucket_base + "/rest/webhook/1.0/projects/" + env.REPO_LOC + "/repos/"
	def var_scm_source_hook 		= JenkinsLocationConfiguration.get().getUrl()+"/bitbucket-scmsource-hook/notify"

	echo "Starting new service on-boarding.."
	echo "params : $params"

	if(params.domain && params.domain.trim() != ""){
		bitbucket_name = params.domain.trim() + "-" + service_name
		domain = params.domain.trim()
	}

	def repo_url = env.REPO_BASE + "/projects/CAS/repos/" + bitbucket_name + "/browse";

	stage('Input Validation')
	{
		sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.VALIDATE_INPUT, Event_Status.STARTED, "")

		if(service_name == "" ) {
			sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.VALIDATE_INPUT, Event_Status.FAILED, "Invalid Service Name")
			error "Invalid Service Name"
		}

		if(admin_group == "" ) {
			sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.VALIDATE_INPUT, Event_Status.FAILED, "Invalid Admin Group")
			//error "Invalid Admin Group"
		}

		if(service_type == "api" || service_type == "lambda" || service_type == "website") {
			if(runtime == "nodejs" || runtime  == "python" || runtime == "java" || runtime == "" ) {

				switch (service_type) {

					case "api":
						if(runtime == "nodejs" )
						{
							service_template = "api-template-nodejs"
						}
						else if (runtime == "python")
						{
							service_template = 'api-template-python'
						}
						else if (runtime == "java")
						{
							service_template = 'api-template-java'
						}
						break

					case "lambda":
						if(runtime == "nodejs" )
						{
							service_template = "lambda-template-nodejs"
						}
						else if (runtime == "python")
						{
							service_template = 'lambda-template-python'
						}
						else if (runtime == "java")
						{
							service_template = 'lambda-template-java'
						}
						break

					case "website":
						service_template = 'static-website-template'
						break

				}
				sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.VALIDATE_INPUT, Event_Status.COMPLETED, "")

			}else {
				sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.VALIDATE_INPUT, Event_Status.FAILED, "Invalid runtime")
				error "Invalid runtime"
			}

		}else {

			sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.VALIDATE_INPUT, Event_Status.FAILED, "Invalid Service Type")
			error "Invalid Service Type"
		}


		echo service_type
		echo service_name
		echo runtime
		echo service_template
		echo admin_group
		echo "creator_username: $creator_username"
	}

	def service_id_in_db = "";
	def region = "us-east-1"//default will be replaced below

	stage ('Get Service Template')
	{
		try{
			sh 'rm -rf *'
			sh 'rm -rf .*'
		}
		catch(error){
			//do nothing
		}

		try{
			sh 'mkdir ' + service_template
			dir(service_template)
			{
				checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: var_credentialsId, url: var_bitbucket_framework_url + service_template + '.git']]])

				config = LoadConfiguration()
				region = config['region']
				if ( (config['region'] != null) && (config['region'] != "") )
					region = config['region']

				echo "Calling add row in db ###################################################"
				service_id_in_db = createServiceInDB(service_name, domain, owner, runtime, repo_url, domain + " - " + service_name, admin_group, service_type, env.API_KEY, "us-east-1");
			}
		}
		catch(error){
			//do nothing
		}

	}


	stage ('Update Service Template')
	{
		sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.MODIFY_TEMPLATE, Event_Status.STARTED, "")
		try{

			dir(service_template)
			{
				// Add service owner in deployment-env.yml
				// adding '\n' to be sure its added in a new line.
				sh "echo \$'\nowner: $owner' >> ./deployment-env.yml"


				// Changing jenkins workflow to put slack_channel one more parameter in deployment-env yml (field name: slack_channel)
				def slack_channelName = params.slack_channel
				if(slack_channelName && slack_channelName.trim() != ""){
					sh "echo \$'slack_channel: $slack_channelName' >> ./deployment-env.yml"
				}

				// Changing jenkins workflow to put require_internal_access as one more parameter in deployment-env yml (field name: require_internal_access)
				def require_internal_access = params.require_internal_access
				if ((service_type == "api" || service_type == "lambda") && require_internal_access != null){
				    sh "echo \$'require_internal_access: $require_internal_access' >> ./deployment-env.yml"
				}
				echo "vpc access func ends"


				sh "sed -i -- 's/service:.*/service : " + service_name +"/g' deployment-env.yml"
				sh "sed -i -- 's/domain:.*/domain : "+ domain +"/g' deployment-env.yml"

				sh "sed -i -- 's/{service_name}/" + service_name + "/g' ./Jenkinsfile"
				sh "sed -i -- 's/{domain}/" + domain + "/g' ./Jenkinsfile"


				if (service_type == "api") {
					// To avoid the swagger errors when loading, we replace placeholder's values here
					// We need to set these values back in jenkins-build-pack so as to replace them with environment specific values
					// sh "sed -i -- 's/{api_host_name}/" + var_api_host_name + "/g' ./swagger/swagger.json"
					// sh "sed -i -- 's/{domain}/" + domain + "/g' ./swagger/swagger.json"
					// sh "sed -i -- 's/{service_name}/" + service_name + "/g' ./swagger/swagger.json"
					// sh "sed -i -- 's/{api_deployment_node_title}/" + service_name + "/g' ./swagger/swagger.json"
				}

				if(service_type == 'website') {
					// add create_cloudfront_url in deployment-env yml
					def create_cloudfront_url = params.create_cloudfront_url
					if(create_cloudfront_url){
						sh "echo \$'create_cloudfront_url: $create_cloudfront_url' >> ./deployment-env.yml"
					}
				}

				if(service_type == 'lambda') {
					def rate_expression = params.rateExpression
					def enable_eventschedule = params.enableEventSchedule

					if(rate_expression && rate_expression.trim() != ""){
						// Using echo commands to write to deployment-env.yml
						sh "echo \$'\neventScheduleRate: cron($rate_expression)' >> ./deployment-env.yml"
					}
					def var_enable_eventschedule;
					if (enable_eventschedule)
					   if (enable_eventschedule == true)
					      var_enable_eventschedule = "true";
					   else if (enable_eventschedule == false)
					      var_enable_eventschedule = "false";

					if(var_enable_eventschedule && var_enable_eventschedule.trim() != ""){
						sh "echo \$'eventScheduleEnable: $enable_eventschedule' >> ./deployment-env.yml"
					}

					/*
					// Using yaml_command plugin (Tested working in terminal)

					// Commenting this block as yaml_command plugin has to be installed
					sh "yaml set eventScheduleRate \"cron($rate_expression)\" -F=./deployment-env.yml --yaml > deployment-temp-env.yml"
					sh "yaml set eventScheduleEnable $enable_eventschedule -F=./deployment-temp-env.yml --yaml > deployment-env.yml"
					*/
				}
				//sh "cat deployment-env.yml"
				sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.MODIFY_TEMPLATE, Event_Status.COMPLETED, "")
			}
		}
		catch(error){
			sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.MODIFY_TEMPLATE, Event_Status.FAILED, error.getMessage())
			echo(error)
		}
	}


	stage ('Uploading templates to code repository')
	{
		sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.CREATE_SERVICE_REPO, Event_Status.STARTED,"")
		dir(service_template)
		{
			try{
				withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: var_credentialsId, passwordVariable: 'PWD', usernameVariable: 'UNAME']]) {
					sh "curl -X POST -k -v -u \"$UNAME:$PWD\" -H \"Content-Type: application/json\" " + var_cas_rest_repo + " -d \'{\"name\":\""+ bitbucket_name +"\", \"scmId\": \"git\", \"forkable\": \"true\"}\'"

					sh "git config --global user.email \"" + var_bitbucket_email + "\""
					sh "git config --global user.name $UNAME"
				}
				sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.CREATE_SERVICE_REPO, Event_Status.COMPLETED,"")
			}
			catch (error)
			{
				sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.CREATE_SERVICE_REPO, Event_Status.FAILED, error.getMessage())
				echo error
			}
		}

		withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: var_credentialsId, passwordVariable: 'PWD1', usernameVariable: 'UNAME']]) {
			def encoded_password = URLEncoder.encode(PWD1, "utf-8")
                        sh "git clone http://$UNAME:$encoded_password@" + var_cas_clone_url + bitbucket_name +".git"
		}
		try{
			sh "mv -nf " + service_template + "/* " + bitbucket_name + "/"
			sh "mv -nf " + service_template + "/.* " + bitbucket_name + "/"
		}
		catch (error)
		{
			//do nothing
		}


		dir (bitbucket_name)
		{
			sh "ls -lart"

            withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: var_credentialsId, passwordVariable: 'PWD', usernameVariable: 'UNAME']]) {
				sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.PUSH_TEMPLATE_TO_SERVICE_REPO, Event_Status.STARTED, "")
				try{
					sh "git add --all"
					sh "git commit -m 'Code from the standard template'"
					sh "git remote -v"
					sh "git push -u origin master "

					sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.PUSH_TEMPLATE_TO_SERVICE_REPO, Event_Status.COMPLETED, "")
				}
				catch (error)
				{
					sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.PUSH_TEMPLATE_TO_SERVICE_REPO, Event_Status.FAILED, error.getMessage())
					echo error
				}

				sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.ADD_WRITE_PERMISSIONS_TO_SERVICE_REPO, Event_Status.STARTED, "")
				try{
					echo "Adding groups to the repository with appropriate permissions"
					sh "curl -X PUT -k -v -u \"$UNAME:$PWD\" \"" + var_cas_rest_repo + ""+ bitbucket_name +"/permissions/users?permission=REPO_ADMIN&" + admin_group + "\" &"

					echo "providing repository write permissions to the service creator"
					sh "curl -X PUT -k -v -u \"$UNAME:$PWD\" \"" + var_cas_rest_repo + "/"+ bitbucket_name +"/permissions/users?permission=REPO_WRITE&name=" + creator_username + "\" &"


					sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.ADD_WRITE_PERMISSIONS_TO_SERVICE_REPO, Event_Status.COMPLETED, "")
				}
				catch(error){
					sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.ADD_WRITE_PERMISSIONS_TO_SERVICE_REPO, Event_Status.FAILED, error.getMessage())
					echo error
				}



				sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.LOCK_MASTER_BRANCH, Event_Status.STARTED, "")
				try{
					checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: var_credentialsId, url: var_serviceonboarding_repo]]])
					echo "Locking commits to master branch by enforcing pull requests"
					sh "curl -X POST -k -v -u \"$UNAME:$PWD\" -H \"Content-Type: application/vnd.atl.bitbucket.bulk+json\" " + var_bitbucket_branch_perm + bitbucket_name + "/restrictions   -d \"@branch_permissions_payload.json\"  "


					sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.LOCK_MASTER_BRANCH, Event_Status.COMPLETED, "")
				}
				catch(error){
					sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.LOCK_MASTER_BRANCH, Event_Status.FAILED, error.getMessage())
					echo error
				}

				sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.ADD_WEBHOOK, Event_Status.STARTED, "")
				try{
					echo "Adding web hooks for Jenkins integration"
					sh "curl -X PUT -k -v -u \"$UNAME:$PWD\" -H \"Content-Type: application/json\"  " + var_bitbucket_webhook_api + bitbucket_name + "/configurations  -d \'{\"title\": \"notify-jenkins\", \"url\": \"" + var_scm_source_hook + "\" , \"enabled\": true}\'"
					sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.ADD_WEBHOOK, Event_Status.COMPLETED, "")
				}
				catch(error){
					sendEvent(service_type, service_name, domain, runtime, admin_group, Event_Name.ADD_WEBHOOK, Event_Status.FAILED, error.getMessage())
					echo error
				}

				echo "Calling update row in db ###################################################"
				updateServiceInDB(service_id_in_db, env.API_KEY, region, "Active", repo_url);
			}
		}
	}
}

def sendEvent(service_type, service_name, domain, runtime, admin_group, event_name, event_status, error){
	echo "send event" + error
}
/**
	Create db entry
*/
def createServiceInDBOLD(service_name, domain, created_by, runtime, repo_url, desc, approver, servicetype, devApiID, region) {
  //def service_name = "TestServ"
  //def domain = "test"
  //def created_by = "somanchi"
  //def runtime = "java"
  //def repo_url = "http://jazz4-bitbucketelb-1017372957.us-east-1.elb.amazonaws.com:7990/scm/cas/slf-jazzjs2.git"

  sh "curl -H \"Content-Type: application/json\" -H \"Authorization: "+params.auth_token+"\" -X POST -k -v -d '{ \"service\": \"" + service_name + "\", \"domain\": \"" + domain + "\", \"type\": \"" + servicetype + "\", \"created_by\": \"" + created_by + "\", \"runtime\": \"" + runtime + "\", \"repository\": \"" + repo_url + "\", \"description\": \"" + desc + "\"}' https://" + devApiID + ".execute-api." + region + ".amazonaws.com/dev/platform/services/"

}

def updateServiceInDB(service_id_in_db, devApiID, region, statusval, repo_url) {
	if ( (region == null) || (region != "") )
		region = "us-east-1"

  sh "curl -H \"Content-Type: application/json\" -H \"Authorization: "+params.auth_token+"\" -X PUT -k -v -d '{ \"status\": \"" + statusval + "\", \"repository\": \"" + repo_url + "\"}' https://" + devApiID + ".execute-api." + region + ".amazonaws.com/dev/platform/services/" + service_id_in_db + "/"
}

def createServiceInDB(service_name, domain, created_by, runtime, repo_url, desc, approver, servicetype, devApiID, region) {

	try {
		def outputStr = sh (
			script: "curl -H \"Content-Type: application/json\" -H \"Authorization: "+params.auth_token+"\" -X POST -k -v -d '{ \"service\": \"" + service_name + "\", \"status\":\"Creating..\", \"domain\": \"" + domain + "\", \"type\": \"" + servicetype + "\", \"created_by\": \"" + created_by + "\", \"runtime\": \"" + runtime + "\", \"repository\": \"" + repo_url + "\", \"description\": \"" + domain + " - " + service_name + "\"}' https://" + devApiID + ".execute-api." + region + ".amazonaws.com/dev/platform/services/",
			returnStdout: true
		).trim()
		echo "outputStr===============" + outputStr
		def jsonParser = new groovy.json.JsonSlurper()
		def resultJson = jsonParser.parseText(outputStr)
		if(resultJson == null || resultJson.data == null || resultJson.data.service_id == null) {
			error "platform/services/ Insert failed"
		}
		return resultJson.data.service_id;
	}catch (ex) {
		if(!((ex.getMessage()).indexOf("groovy.json.internal.LazyMap") > -1)) {
			//events.sendFailureEvent('VALIDATE_PRE_BUILD_CONF', ex.getMessage())
			error "createServiceInDB Failed. "+ex.getMessage()
		} else {
			//events.sendCompletedEvent('VALIDATE_PRE_BUILD_CONF', "Service exists for deletion")
		}
	}

}

def LoadConfiguration() {
	def prop = [:]
	def result = readFile('deployment-env.yml').trim()
	echo "result of yaml parsing....$result"
	def resultList = result.tokenize("\n")
	// delete commented lines
	def cleanedList = []
	for (i in resultList) {
		if(i.toLowerCase().startsWith("#")) {
		}else {
			cleanedList.add(i)
		}
		}
		def newItem = ["subnetIds", ""]
	for (item in cleanedList) {

		// Clean up to avoid issues with more ":" in the values
		item = item.replaceAll(" ", "").replaceFirst(":", "#");

		def eachItemList = item.tokenize("#")
		//handle empty values
		def value = "";
		if(eachItemList[1]) {
			value = eachItemList[1].trim();
		}
		if(eachItemList[0].trim() == "securityGroupIds")
		{

			if(value.indexOf('"') == -1)
				value = "\"" + value + "\""

			echo value
		}

		if(eachItemList[0].trim() == "subnetIds1" || eachItemList[0].trim()  == "subnetIds2" || eachItemList[0].trim()  == "subnetIds3")
		{
			if(newItem[1].trim()  == "")
				newItem[1] = "\""  + eachItemList[1].trim()

			else
				newItem[1] =  newItem[1].trim()  + "," + eachItemList[1].trim()

		}
		else if(eachItemList[0]) {
			prop.put(eachItemList[0].trim(), value)
		}

	}
	if(newItem[1] != "")
	{
	 newItem[1] =  newItem[1].trim()  + "\""
		prop.put(newItem[0].trim(),  newItem[1].trim())
		def key = newItem[0].trim()
		def val = newItem[1].trim()
	}
	echo "Loaded configurations...$prop"

	return prop
}
