#!groovy.

/*
* Module that handles managing gitlab webhooks and routes them to respective build packs
*/

// To be replaced as @Field def repo_credential_id = "value" for repo_credential_id, repo_base and repo_core
@Field def repo_credential_id
@Field def repo_base
@Field def repo_core
@Field def scm_type

@Field def configModule
@Field def configLoader
@Field def scmModule

@Field def g_login_token = ''
@Field def g_base_url = ''
@Field def g_svc_admin_cred_ID = 'SVC_ADMIN'

node  {
    
    def jazzBuildModuleURL = getBuildModuleUrl()
	loadConfigModule(jazzBuildModuleURL)
	loadSCMModule(jazzBuildModuleURL)

    g_base_url = "https://${configLoader.AWS.API.PROD_ID}.execute-api.${configLoader.AWS.REGION}.amazonaws.com/prod"
	
    def gitlab_repo_name  = env.gitlabSourceRepoName
    //def gitlab_branch     = env.gitlabBranch
    def service_type = ''
    def service_name = ''
    def domain_name  = ''

    try{
        sh 'rm -rf $gitlab_repo_name*'
    	dir(gitlab_repo_name)
    	{
    		checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: repo_credential_id, url: scmModule.getRepoUrl(gitlab_repo_name)]]])
    	    config = getServiceConfiguration(jazzBuildModuleURL)
    	   //Find the service type
    	   if (fileExists('build.api')) {
				service_type = "api"
                service_name = config['service']
                domain_name  = config['domain']
    	   } else if(fileExists('build.lambda')) {
				service_type = "lambda"
                service_name = config['service']
                domain_name  = config['domain']
    	   } else if(fileExists('build.website')) {
				service_type = "website"
                service_name  = config['service']
                domain_name  = config['domain']
    	   }
    	}

    	sh 'rm -rf $gitlab_repo_name*'
    }
    catch(ex){
    	error "Error inside gitlab-buildpack ... " + ex.getMessage()
    }

    //Get the Build URL
    if (service_type == 'api') {
        build_job = configLoader.API.API_BUILD_URI
    }else if(service_type == 'website') {
        build_job = configLoader.WEBSITE.WEBSITE_BUILD_URI
     } else if (service_type == 'lambda' || service_type == 'function'){
        build_job = configLoader.LAMBDA.LAMBDA_BUILD_URI
    }

    def job_url = JenkinsLocationConfiguration.get().getUrl() + build_job
    if ( service_type != '' && service_name != '' && domain_name != '') {
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: configLoader.JENKINS.CREDENTIAL_ID, passwordVariable: 'PWD', usernameVariable: 'UNAME']]){
        
        sh "curl -X GET -k -v -u \"$UNAME:$PWD\"   \""${job_url}&service_name=$service_name&domain=$domain_name&scm_branch=${env.BRANCH_NAME}\""
     }else
     {
        error "Error: service type or service name or namespace is empty"
     }
}

/**
	Reads deployment-env.yml.
    Returns Property Map
*/
def getServiceConfiguration(jazzBuildModuleURL) {
    def prop = [:]
    if (fileExists('deployment-env.yml')){
        def result = readFile('deployment-env.yml').trim()

        def resultList = result.tokenize("\n")

        // delete commented lines
        def cleanedList = []
        for (i in resultList) {
            if(!i.toLowerCase().startsWith("#")) {
                cleanedList.add(i)
            }
        }//for

        for (item in cleanedList) {
            // Clean up to avoid issues with more ":" in the values
            item = item.replaceAll(" ", "").replaceFirst(":", "#");
            def eachItemList = item.tokenize("#")
            //handle empty values
            def value = "";
            if(eachItemList[1]) {
                value = eachItemList[1].trim();
            }
            
            if(eachItemList[0]) {
                prop.put(eachItemList[0].trim(), value)
            }
        }

        if(prop.service_id){	
			def url = "$g_base_url/platform/services/${prop.service_id}"
			serviceMetadata = loadServiceMetadataModule(jazzBuildModuleURL)
			serviceMetadata.setUrl(url)
			
            def serviceData = serviceMetadata.loadServiceMetaData()

			if(serviceData && serviceData.data){	
				config = serviceData.data['metadata']

                return config
			}else{
				error "Error while fetching service metadata"
			}
		}else{
			error "Service Id is not available."
		}
    }
    error "Unable to find deployment-env file"
}

/*
* Load config variables from build module
*/
def loadConfigModule(buildModuleUrl){

	dir('config-loader') {
		checkout([$class: 'GitSCM', branches: [
			[name: '*/master']
		], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
			[credentialsId: repo_credential_id, url: buildModuleUrl]
		]])

		def resultJsonString = readFile("jazz-installer-vars.json")
		configModule = load "config-loader.groovy"
		configLoader = configModule.initialize(resultJsonString)
	}
}

/*
load scm module
*/
def loadSCMModule(buildModuleUrl){

	try {	
		dir('scm-loader') {
			checkout([$class: 'GitSCM', branches: [
				[name: '*/master']
			], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
				[credentialsId: repo_credential_id, url: buildModuleUrl]
			]])

			scmModule = load "scm-module.groovy"
			scmModule.initialize(configLoader)
		}
	}catch(ex) {
		error "loadSCMModule failed: " + ex.toString()
	}
}

/**
 * Load metadata module groovy file
 *
 */
def loadServiceMetadataModule(buildURL) {
	try {						
		dir('service-metadata') {
			checkout([$class: 'GitSCM', branches: [
				[name: '*/master']
			], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
				[credentialsId: repo_credential_id, url: buildURL]
			]])
			serviceMetadata = load "service-metadata-loader.groovy"			
			serviceMetadata.setAuthToken(setCredentials())

			// Load and set dependent utility module.
			Util = load "utility-loader.groovy"
			serviceMetadata.setUtil(Util)
			return serviceMetadata 
		}
	
	}catch(ex) {
		error "loadServiceMetadataModule failed: "+ex.toString()
	}
}

def getBuildModuleUrl() {
    if (scm_type && scm_type != "bitbucket") {
      // right now only bitbucket has this additional tag scm in its git clone path
      return "http://${repo_base}/${repo_core}/jazz-build-module.git" 
    }else {
      return "http://${repo_base}/scm/${repo_core}/jazz-build-module.git"
    } 
} 