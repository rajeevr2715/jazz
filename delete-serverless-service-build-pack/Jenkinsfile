#!groovy.
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import groovy.transform.Field
//@Field def events

/**
 * The Service delete workflow for service Types: API, LAMBDA & Website
 * @author:
*/

node {

	echo "Starting delete service job.."
	echo "params : $params"

	def service_name
	def domain
	def version
	def bitbucket_repo_name
	def tracking_id
	def config
    def runtime
  	def region
  	def serviceConfig
  	def domainConfig
	def role
	def cloudfrontEnabled
	def flowType
  	def var_db_service_id = params.db_service_id

	def repo_protocol				= "http://"

	def var_credentialsId 			= env.REPO_CREDENTIAL_ID
	def var_bitbucket_base			= env.REPO_BASE
	def var_bitbucket_framework_url = repo_protocol + var_bitbucket_base + "/scm/" + env.REPO_CORE + "/"
	def var_api_key 				= env.API_KEY
	def var_cas_rest_repo 			= repo_protocol + var_bitbucket_base  + "/rest/api/1.0/projects/" + env.REPO_LOC + "/repos"

	def var_bitbucket_email 		= env.REPO_EMAIL
	def var_cas_clone_url	 		= var_bitbucket_base + "/scm/" + env.REPO_LOC + "/"

	def configPackBBURL = "http://" + var_bitbucket_base + "/scm/" + env.REPO_CORE + "/serverless-config-pack.git"


	def var_serviceonboarding_repo 	= repo_protocol + var_bitbucket_base + "/scm/" + env.REPO_CORE + "/service-onboarding-build-pack.git"
	
	def var_bitbucket_branch_perm	= repo_protocol + var_bitbucket_base + "/rest/branch-permissions/2.0/projects/" + env.REPO_LOC + "/repos/"
	def var_bitbucket_webhook_api	= repo_protocol + var_bitbucket_base + "/rest/webhook/1.0/projects/" + env.REPO_LOC + "/repos/"
	def var_scm_source_hook 		= JenkinsLocationConfiguration.get().getUrl()+"/bitbucket-scmsource-hook/notify"



	if (params.service_name) {
		service_name =  params.service_name.trim()
	}
	if(params.domain){
		domain = params.domain.trim()
	} else { domain = "" }
	if(params.version){
		version = params.version.trim()
	}
	if(params.tracking_id){
		tracking_id = params.tracking_id.trim()
	}
	bitbucket_repo_name = service_name
	if(domain && domain != ""){
		bitbucket_repo_name = domain + "-" + service_name
	}

	sh 'rm -rf ' + bitbucket_repo_name
	sh 'mkdir ' + bitbucket_repo_name


	stage("Initialization") {
		
		checkoutSCM(bitbucket_repo_name, repo_protocol + var_cas_clone_url)
		config = dir(bitbucket_repo_name)
		{
			return LoadConfiguration()
		}
		runtime = config['providerRuntime']
		region = config['region']
		if (region == null) {
			region = "us-east-1"
		}
		serviceConfig = config['service']
		domainConfig = config['domain']

		role = config['iamRoleARN']


		updateServiceInDB(var_db_service_id, env.API_ID_DEV, region, "Deleting");

		dir(bitbucket_repo_name)
		{
			echo "loadServerlessConfig......."

			if (fileExists('build.api')) {
				flowType = "API"
				loadServerlessConfig(runtime, configPackBBURL)
				changeServerlessConfig(runtime)
				
				updateSwaggerConfig(domain, params.service_name.trim(), env.API_KEY, config)
			} else if(fileExists('build.lambda')) {
				flowType = "LAMBDA"
				loadServerlessConfig(runtime, configPackBBURL)
				changeServerlessConfig(runtime)
			} else if(fileExists('build.website')) {
				flowType = "WEBSITE"
				if(config['create_cloudfront_url']) {
					cloudfrontEnabled = config['create_cloudfront_url'].trim()
				}else {
					cloudfrontEnabled = "false"
				}

			} else {
				error "Invalid project configuration"
			}
		}
	}

	stage("Validation") {
		validateInput(service_name, domain, version)
		checkServiceExists(service_name, domain, region)
	}

	dir(bitbucket_repo_name)
	{

		switch (flowType) {
			case "API":
				stage('Undeploy Service') {
					updateServiceNameConfig(domain, service_name, "dev")
					def path = getResourcePath()
					//sh "sed -i -- 's/{opt:stage}/dev/g' serverless.yml"
					cleanUpApiGatewayResources("dev", path, region)
					//cleanUpApiDocs("dev", service_name, domain)
					unDeployService('dev', region)

					updateServiceNameConfig(domain, service_name, "stg")
					//sh "sed -i -- 's/{opt:stage}/stg/g' serverless.yml"
					cleanUpApiGatewayResources("stg", path, region)
					//cleanUpApiDocs("stg", service_name, domain)
					unDeployService('stg', region)

					updateServiceNameConfig(domain, service_name, "prod")
					//sh "sed -i -- 's/{opt:stage}/prod/g' serverless.yml"
					cleanUpApiGatewayResources("prod", path, region)
					//cleanUpApiDocs("prod", service_name, domain)
					unDeployService('prod', region)

				}
				break

			case "LAMBDA":
				stage('Undeploy Service') {
					updateServiceNameConfig(domain, service_name, "dev")
					unDeployService('dev', region)
					updateServiceNameConfig(domain, service_name, "stg")
					unDeployService('stg', region)
					updateServiceNameConfig(domain, service_name, "prod")
					unDeployService('prod', region)
				}
				break

			case "WEBSITE":
				stage('Undeploy Service') {
					if (cloudfrontEnabled == "true") {
						cleanupCloudFrontDistribution(service_name, domain, "dev")
					}
					unDeployWebsite(service_name, domain, "dev", region)

					if (cloudfrontEnabled == "true") {
						cleanupCloudFrontDistribution(service_name, domain, "stg")
					}
					unDeployWebsite(service_name, domain, "stg", region)

					if (cloudfrontEnabled == "true") {
						cleanupCloudFrontDistribution(service_name, domain, "prod")
					}
					unDeployWebsite(service_name, domain, "prod", region)
				}
				break
		}
	}

	stage('Cleanup BitBucket/Catalog') {
		deleteProject(bitbucket_repo_name)
		deleteserviceindb(region, var_db_service_id)
	}

}

/**
 * Calls the serverless remove to undeploy the lambda service
 * @param  stage
 * @return
 */
def unDeployService(stage, region) {
	//events.sendStartedEvent('UNDEPLOY_LAMBDA', null, null, getEnvKey(stage))
	withCredentials([
		[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: env.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
	]) {
		try {
			sh "aws configure set profile.cloud-api.region " + region
			sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
			sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
			sh "serverless remove --stage "+stage+" --verbose --bucket " + getServiceBucket(stage)
			echo "Service undeployed"
		}catch(ex) {
			error ex.getMessage()
		}
	}
}

/**
 * Checkout Code
 * @param  bitbucket_repo_name
 * @return
 */
def checkoutSCM(bitbucket_repo_name, var_cas_clone_url) {
	dir(bitbucket_repo_name)
	{
		def repo_url = var_cas_clone_url + bitbucket_repo_name+".git"
		//events.sendStartedEvent('GET_SERVICE_CODE')
		try {

			checkout([$class: 'GitSCM', branches: [
				[name: '*/master']
			], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
				[credentialsId: env.REPO_CREDENTIAL_ID, url: repo_url]
			]])
		}catch(ex) {
			//events.sendFailureEvent('GET_SERVICE_CODE', ex.getMessage())
			error "checkoutSCM Failed. "+ex.getMessage()
		}
	}
}

/**
 * Load the serverless configuration file from SCM based on the runtime.
 * @param  runtime
 * @return
 */
def loadServerlessConfig(runtime) {
	//events.sendStartedEvent('GET_SERVERLESS_CONF')
	echo "loadServerlessConfig::" + runtime
	try {
		dir('_config') {
			checkout([$class: 'GitSCM', branches: [
				[name: '*/master']
			], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
				[credentialsId: env.REPO_CREDENTIAL_ID, url: env.GIT_CONFIG_URL]
			]])
		}
		if (runtime.indexOf("nodejs") > -1) {
			sh "cp _config/serverless-nodejs.yml ./serverless.yml"
		} else if (runtime.indexOf("java") > -1) {
			sh "cp _config/serverless-java.yml ./serverless.yml"
		} else if (runtime.indexOf("python") > -1) {
			sh "cp _config/serverless-python.yml ./serverless.yml"
		}
	}catch(ex) {
		//events.sendFailureEvent('GET_SERVERLESS_CONF', ex.getMessage())
		error "loadServerlessConfig Failed. "+ex.getMessage()
	}
}

/**
 * Set the lambda execution role
 * @param  role
 * @return
 */
def setLambdaExecutionRole(role) {
	def lambdaRole = "";
	try {
		if (role != null && !role.equals("")) {
			lambdaRole = role;
		} else {
			lambdaRole = env.DEFAULT_LAMBDA_EXE_ROLE;
		}
		sh "sed -i -- 's#DEFAULT_LAMBDA_EXE_ROLE#"+lambdaRole+"#g' serverless.yml"
	}catch(ex) {
		error "setLambdaExecutionRole Failed. "+ex.getMessage()
	}
}

def changeServerlessConfig(String runtime) {
		def config = LoadConfiguration()
		def subnetIds = config['subnetIds']
		def securityGroupIds = config['securityGroupIds']
        def internalAccess = config['require_internal_access']
		sh "sed -i -- 's/securityGroupIds/securityGroupIdsOld/g' deployment-env.yml"
		sh "sed -i -- 's/subnetIds/subnetIdsOld/g' deployment-env.yml"
		sh "echo '\nsubnetIds : $subnetIds\nsecurityGroupIds : $securityGroupIds\n' >> deployment-env.yml"

	echoServerlessFile()

}

def echoServerlessFile() {
	def serverlessyml = readFile('serverless.yml').trim()
	echo "serverless file data $serverlessyml"
}


/**
 * Update the service name in serverless config file
 * @param  domain
 * @param  serviceName
 * @return
 */
def updateServiceNameConfig(domain, serviceName, envval) {
	sh "rm serverless.yml"
	sh "cp serverless-temp.yml serverless.yml"

	//events.sendStartedEvent('UPDATE_DEPLOYMENT_CONF')
	def fullServiceName = service_name
	def cfStackName = service_name
	if(domain && domain!= ""){
		fullServiceName = domain+ "-" + service_name
		cfStackName = serviceName + "-" + domain //sets CF Stack name as service--domain-env
	}

	fullServiceName = env.env_name_prefix + "-" + fullServiceName
	cfStackName = fullServiceName

	try {
		sh "sed -i -- 's/service: \${file(deployment-env.yml):service}/service: " + cfStackName + "/g' serverless.yml"
		sh "sed -i -- 's/name: \${self:service}/name: " + fullServiceName+"/g' serverless.yml"
		//events.sendCompletedEvent('UPDATE_DEPLOYMENT_CONF')
	}catch(ex) {
		//events.sendFailureEvent('UPDATE_DEPLOYMENT_CONF', ex.getMessage())
		error "updateServiceNameConfig Failed. "+ex.getMessage()
	}
}

/**
 * Replace the service name & Domain place holders in swagger file.
 * @param  domain
 * @param  serviceName
 * @return
 */
def updateSwaggerConfig(domain, serviceName, api_key, config) {
	//events.sendStartedEvent('UPDATE_SWAGGER')

	try {
		if (fileExists('swagger/swagger.json')) {
			sh "sed -i -- 's/{service_name}/" + serviceName + "/g' swagger/swagger.json"
			sh "sed -i -- 's/{domain}/" + domain + "/g' swagger/swagger.json"

			def region = config['region']
			def roleARN = config['iamRoleARN'].replaceAll("/", "\\\\/")
			def var_api_host_name = api_key +".execute-api."+region+".amazonaws.com"

			// TODO: the below couple of statements will be replaced with regular expression in very near future;
			def roleId = roleARN.substring(roleARN.indexOf("::")+2, roleARN.lastIndexOf(":"))

			sh "sed -i -- 's/{conf-role}/" + roleARN + "/g' ./swagger/swagger.json"
			sh "sed -i -- 's/{conf-region}/" + region + "/g' ./swagger/swagger.json"
			sh "sed -i -- 's/{conf-accId}/" + roleId + "/g' ./swagger/swagger.json"


		}
		//events.sendCompletedEvent('UPDATE_SWAGGER')
	}catch(ex) {
		//events.sendFailureEvent('UPDATE_SWAGGER', ex.getMessage())
		error "updateServiceNameConfig Failed. "+ex.getMessage()
	}
}

/**
 * Load the deployment config file
 * @return
 */
def LoadConfiguration() {
	def prop = [:]
	//events.sendStartedEvent('GET_DEPLOYMENT_CONF')
	try {
		def result = readFile('deployment-env.yml').trim()
		def resultList = result.tokenize("\n")

		def cleanedList = []
		for (i in resultList) {
			if(i.toLowerCase().startsWith("#")) {
			}else {
				cleanedList.add(i)
			}
		}
		for (item in cleanedList) {
			item = item.replaceAll(" ", "").replaceFirst(":", "#");
			def eachItemList = item.tokenize("#")
			if(eachItemList[0].trim()) {
				if(eachItemList[1] == null) { eachItemList[1] = "" }
				prop.put(eachItemList[0].trim(), eachItemList[1].trim())
			}
		}
		echo "Loaded configurations...$prop"
		//events.sendCompletedEvent('GET_DEPLOYMENT_CONF')
		return prop
	}catch(ex) {
		//events.sendFailureEvent('GET_DEPLOYMENT_CONF', ex.getMessage())
		error "LoadConfiguration Failed. "+ex.getMessage()
	}
}

/**
 * Validate service inputs
 * @param  service_name
 * @param  domain
 * @param  version
 * @return
 */
def validateInput(service_name, domain, version) {
	//events.sendStartedEvent('VALIDATE_PRE_BUILD_CONF', "Input validation")
	if(service_name == null || service_name.equals("")) {
		error "Service Name is invalid"
	}
}

/**
 * Check if a service is valid or esists first before scheduling for deletion
 * @param  domain
 * @param  service_name
 * @throws error when service is invalid
 * @return
 */
def checkServiceExists(service_name, domain, region) {
	//events.sendStartedEvent('VALIDATE_PRE_BUILD_CONF', "Check if service exists")
	try {
		def outputStr = sh (
			script: "curl -H \"Authorization: "+params.auth_token+"\" 'https://" + env.API_ID_DEV + ".execute-api." + region + ".amazonaws.com/dev//platform/is-service-available?domain="+domain+"&service="+service_name+"'" ,
			returnStdout: true
		).trim()
		echo outputStr
		def jsonParser = new groovy.json.JsonSlurper()
		def resultJson = jsonParser.parseText(outputStr)
		if(resultJson == null || resultJson.data == null || resultJson.data.available == null) {
			error "Is-service-available lookup failed"
		} else if(resultJson.data.available == true) {
			error "No service exists with name "+service_name+" under domain "+domain
		}
		//events.sendCompletedEvent('VALIDATE_PRE_BUILD_CONF', "Service exists for deletion")
	}catch (ex) {
		if(!((ex.getMessage()).indexOf("groovy.json.internal.LazyMap") > -1)) {
			//events.sendFailureEvent('VALIDATE_PRE_BUILD_CONF', ex.getMessage())
			error "checkServiceExists Failed. "+ex.getMessage()
		} else {
			//events.sendCompletedEvent('VALIDATE_PRE_BUILD_CONF', "Service exists for deletion")
		}
	}
}


def deleteserviceindb(region, db_id) {
	
	try {
		sh "curl -X DELETE -k -v -H \"Authorization: "+params.auth_token+"\" 'https://" + env.API_ID_DEV + ".execute-api." + region + ".amazonaws.com/dev/platform/services/" + db_id + "'"
	}catch (ex) {
		if(!((ex.getMessage()).indexOf("groovy.json.internal.LazyMap") > -1)) {
			error "deleteService Failed. "+ex.getMessage()
		} else {
		}
	}
}

/**
 * Delete the project repository from bitbucket
 * @param  repoName
 * @return
 */
def deleteProject(repoName) {
	//events.sendStartedEvent('DELETE_PROJECT')
	try {
		withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: env.REPO_CREDENTIAL_ID, passwordVariable: 'PWD', usernameVariable: 'UNAME']]) {
		echo "deleting repository from bitbucket $repoName"
		def repourl = "http://" + env.REPO_BASE + "/rest/api/1.0/projects/CAS/repos/" + repoName;
		echo repourl
		def outputStr = sh (
			script: "curl -X DELETE -k -u \"$UNAME:$PWD\" '" + repourl +"'" ,
			returnStdout: true
		).trim()
		echo outputStr
		}
		//events.sendCompletedEvent('DELETE_PROJECT')
	} catch (ex) {
		//events.sendFailureEvent('DELETE_PROJECT', ex.getMessage())
		error "deleteProject failed. "+ex.getMessage()
	}


}

/**
 * Clean up the API gateway resource configurations specific to the service
 * @param  stage environment
 * @param  path the resource path
 * @return
 */
def cleanUpApiGatewayResources(stage, path, region) {
	//events.sendStartedEvent('DELETE_API_RESOURCE', null, null, getEnvKey(stage))
	withCredentials([
		[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: env.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
	]) {
		try {
			sh "aws configure set profile.cloud-api.region " + region
			sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
			sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"

			//def resource_id = findResourceId(stage, path)
			def resource_id = null
			try {
				def outputStr = sh (
					script: "aws apigateway get-resources --rest-api-id "+getApiId(stage)+" --region " + region + " --output json" ,
					returnStdout: true
				).trim()

				def list = parseJson(outputStr)
				for (items in list["items"]) {
					if(items["path"] == path) {
						resource_id = items["id"]
					}
				}
			} catch(ex) {
				error "findResourceId Failed"+ex.getMessage()
			}


			if(resource_id != null && resource_id != ""){
				def status_json = sh (
					script: "aws apigateway delete-resource --rest-api-id "+getApiId(stage)+"  --region " + region + " --resource-id "+resource_id+" --output json" ,
					returnStdout: true
				).trim()
				//events.sendCompletedEvent('DELETE_API_RESOURCE', null, null, getEnvKey(stage))
			} else {
				echo "Resource Id does not exists in API gateway."
				//events.sendCompletedEvent('DELETE_API_RESOURCE', "No Resource to be deleted", null, getEnvKey(stage))
			}

		} catch(ex) {
			//events.sendFailureEvent('DELETE_API_RESOURCE', ex.getMessage(), null, getEnvKey(stage))
			error ex.getMessage()
		}
	}
}

/**
 * Find the resource Id of the service deployed in API gateway
 * @param  stage string
 * @param  resourcepath string
 * @return  resource Id
 */
def findResourceId(stage, resourcePath) {
	def resource_id = null
	try {
		def outputStr = sh (
			script: "aws apigateway get-resources --rest-api-id "+getApiId(stage)+" --output json" ,
			returnStdout: true
		).trim()

		def list = parseJson(outputStr)
		for (items in list["items"]) {
			if(items["path"] == resourcePath) {
				resource_id = items["id"]
			}
		}
		return resource_id
	} catch(ex) {
		error "findResourceId Failed"+ex.getMessage()
	}
}

@NonCPS
def parseJson(jsonString) {
    def lazyMap = new groovy.json.JsonSlurper().parseText(jsonString)
    def m = [:]
    m.putAll(lazyMap)
    return m
}

/**
 * Get the API Id of the gateway specific to an environment. The values will be pulled ENV vars set
 * @param  stage the environment
 * @return  api Id
 */
def getServiceBucket(stage) {
	if(stage == 'dev') {
		return env.WEBSITE_DEV_S3BUCKET;
	}else if (stage == 'stg') {
		return env.WEBSITE_STG_S3BUCKET;
	} else if (stage == 'prod') {
		return env.WEBSITE_PROD_S3BUCKET;
	}
}


/**
 * Get the API Id of the gateway specific to an environment. The values will be pulled ENV vars set
 * @param  stage the environment
 * @return  api Id
 */
def getApiId(stage) {
	if(stage == 'dev') {
		return env.API_ID_DEV
	}else if (stage == 'stg') {
		return env.API_ID_STG
	} else if (stage == 'prod') {
		return env.API_ID_PROD
	}
}

/**
 * Clean up the API documentation folder from S3 corresponding to the environment
 * @param  stage the environment
 * @return  api Id
 */
def cleanUpApiDocs(stage, service, domain) {
	//events.sendStartedEvent('DELETE_API_DOC', null, null, getEnvKey(stage))
	withCredentials([
		[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: env.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
	]) {
		try {
			sh "aws configure set profile.cloud-api.region us-east-1"
			sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
			sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
			def apiRootFolder = getApiDocsFolder(stage)
			def servicePath = domain+"_"+service
			sh "aws s3 rm s3://"+apiRootFolder+"/"+servicePath+" --recursive"
			//events.sendCompletedEvent('DELETE_API_DOC', null, null, getEnvKey(stage))
		} catch(ex) {
			//events.sendFailureEvent('DELETE_API_DOC', ex.getMessage(), null, getEnvKey(stage))
			error "cleanUpApiDocs Failed. "+ex.getMessage()
		}
	}

}

/**
 * Get the API docs folder for environment
 * @param stage environment
 * @return  folder name
 */
def getApiDocsFolder(stage) {
	if(stage == 'dev') {
		return "dev-cloud-api-doc.corporate.com"
	}else if (stage == 'stg') {
		return "stg-cloud-api-doc.corporate.com"
	} else if (stage == 'prod') {
		return "cloud-api-doc.corporate.com"
	}
}

/**
 * Get the environment key
 * @param stage environment
 * @return  environment key to be represented in the event
 */
def getEnvKey(stage) {
	if(stage == 'dev') {
		return "DEV"
	}else if (stage == 'stg') {
		return "STG"
	} else if (stage == 'prod') {
		return "PROD"
	}
}

/**
 * Get the resource Path from domain and service name.
 * @return  formed resource path string
 */
def getResourcePath() {
	def basePath
	def pathInfo
	def resourcepath
	try {
		dir("swagger") {
			def swaggerStr = readFile('swagger.json').trim()
			def swaggerJsonObj = parseJson(swaggerStr)
			basePath = swaggerJsonObj.basePath
			def keys = swaggerJsonObj.paths.keySet()
			for (_p in keys) {
				pathInfo = _p
				break
			}
		}
		resourcepath = (basePath+"/"+pathInfo).replaceAll("//","/")
		return resourcepath
	} catch(ex) {
		error "getResourcePath Failed. "+ex.getMessage()
	}
}

/**
 * Undeploy the website. Delete the web folder from S3 bucket
 * @param stage
 * @return
 */
def unDeployWebsite(service, domain, stage, region) {
    echo "unDeployWebsite::" + service + "::" + domain + "::" + stage

	//events.sendStartedEvent('UNDEPLOY_WEBSITE', null, null, getEnvKey(stage))
	withCredentials([
		[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: env.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
	]) {
		try {
			sh "aws configure set profile.cloud-api.region $region"
			sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
			sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
			sh "aws configure set preview.cloudfront true"

			def folderName = service // temporary fix
			//def folderName = domain+"_"+service // @TODO: enable after bug fix CAPI 344
			def _exists = checkIfWebsiteExists(stage, domain + "-" + folderName)
			if(_exists) {
				sh "aws s3 rm s3://"+getBucket(stage)+"/" + domain + "-" + folderName+" --recursive"
				cleanupS3BucketPolicy(service, domain, stage)
			}
			//events.sendCompletedEvent('UNDEPLOY_WEBSITE', null, null, getEnvKey(stage))
		} catch(ex) {
			//events.sendFailureEvent('UNDEPLOY_WEBSITE', ex.getMessage(), null, getEnvKey(stage))
			error ex.getMessage()
		}
	}
}

/**
 * Check if the website folder existing in the S3 buckets for each environments
 * @param stage
 * @return  true/false
 */
def checkIfWebsiteExists(stage, folderName) {
	def status = true;
	try {
		sh "aws s3 ls s3://"+getBucket(stage)+"/"+folderName
	}catch(ex) {
		echo "Bucket or Folder does not exists"
		status = false
	}
	return status
}

/**
 * Get bucket name for environment
 * @param stage environment
 * @return  folder name
 */
def getBucket(stage) {
	if(stage == 'dev') {
		return env.WEBSITE_DEV_S3BUCKET //"dev-serverless-static-website"
	}else if (stage == 'stg') {
		return env.WEBSITE_STG_S3BUCKET //"stg-serverless-static-website"
	} else if (stage == 'prod') {
		return env.WEBSITE_PROD_S3BUCKET //"prod-serverless-static-website"
	}
}

/**
 * Delete the the bucket policies related to the service folder
 * @param service
 * @param domain
 * @param stage
 * @return
 */
def cleanupS3BucketPolicy(service, domain, stage) {
	//events.sendStartedEvent('DELETE_S3BUCKET_POLICY', null, null, getEnvKey(stage))

	echo "cleanupS3BucketPolicy called"

	withCredentials([
		[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: env.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
	]) {
		try {
			sh "aws configure set profile.cloud-api.region us-east-1"
			sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
			sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
			sh "aws configure set preview.cloudfront true"

			def folderName = domain + "-" + service // temporary fix
			//def folderName = domain+"_"+service // @TODO: enable after bug fix CAPI 344

			def bucketPolicy = sh (
				script: "aws s3api get-bucket-policy --bucket " + getBucket(stage) + " --output json",
				returnStdout: true
			).trim()

			def policyObject = parseJson(parseJson(bucketPolicy).Policy)
			def policyObjectUpdated = [:]
			policyObjectUpdated.Version = policyObject.Version
			policyObjectUpdated.Id = policyObject.Id

			def statements = []
			def resourcePattern = getBucket(stage)+"/"+folderName+"/"
			for (items in policyObject.Statement) {
				if(items.Sid != folderName || !(items.Resource.indexOf(resourcePattern) > -1)) {
					def copy = [:]
					copy.putAll(items)
					statements.add(copy)
				}
			}
			policyObjectUpdated.Statement = statements
			def policy_json = JsonOutput.toJson(policyObjectUpdated)

			def bucketName = getBucket(stage)
			updateBucketPolicy(policy_json, bucketName)
            resetCredentials()
			//events.sendCompletedEvent('DELETE_S3BUCKET_POLICY', null, null, getEnvKey(stage))
		} catch(ex) {
            resetCredentials()
			if(ex.getMessage().indexOf("groovy.json.internal.LazyMap") < 0) {
				//events.sendFailureEvent('DELETE_S3BUCKET_POLICY', ex.getMessage(), null, getEnvKey(stage))
				error "cleanupS3BucketPolicy Failed. "+ex.getMessage()
			} else {
				//events.sendCompletedEvent('DELETE_S3BUCKET_POLICY', null, null, getEnvKey(stage))
			}
		}
	}

}

/**
	Reset credentials
*/
def resetCredentials() {
    echo "resetting AWS credentials"
    sh "aws configure set profile.cloud-api.aws_access_key_id XXXXXXXXXXXXXXXXXXXXXXXXXX"
    sh "aws configure set profile.cloud-api.aws_access_key_id XXXXXXXXXXXXXXXXXXXXXX"
}


@NonCPS
def updateBucketPolicy(policy_json, bucketName){
	try {
		sh "aws s3api put-bucket-policy \
				--output json \
				--bucket "+bucketName+" \
				--policy \'${policy_json}\'"
	} catch(e) {
			error e.getMessage()
	}
}
/**
 * Delete the the cloud Front policies related to the service folder
 * @param service
 * @param domain
 * @param stage
 * @return
 */
def cleanupCloudFrontDistribution(service, domain, stage) {
	//events.sendStartedEvent('DELETE_CLOUDFRONT', null, null, getEnvKey(stage))
	withCredentials([
		[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: env.AWS_CREDENTIAL_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
	]) {
		try {
			sh "aws configure set profile.cloud-api.region us-east-1"
			sh "aws configure set profile.cloud-api.aws_access_key_id $AWS_ACCESS_KEY_ID"
			sh "aws configure set profile.cloud-api.aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
			sh "aws configure set preview.cloudfront true"

			def distributionID
			def _Etag

			distributionID = getDistributionId(stage, domain, service)
			def distributionConfig = getDistributionConfig(distributionID)
			_Etag = generateDistributionConfigForDisable(distributionConfig)
			_Etag = disableCloudFrontDistribution(distributionID, _Etag, "disable-cf-distribution-config.json", stage)
			deleteCloudFrontDistribution(distributionID, _Etag)
			//events.sendCompletedEvent('DELETE_CLOUDFRONT', null, null, getEnvKey(stage))
		} catch(ex) {
				if((ex.getMessage()).indexOf("getDistributionId Failed") > -1) {
					echo "Could not find a CloudFront distribution Id for service: $service and environment $stage"
					//events.sendCompletedEvent('DELETE_CLOUDFRONT', "CF resource not available", null, getEnvKey(stage))
				} else {
					//events.sendFailureEvent('DELETE_CLOUDFRONT', ex.getMessage(), null, getEnvKey(stage))
					error "cleanupCloudFrontDistribution Failed. "+ex.getMessage()
				}
		}
	}

}

/**
 * Get the CloudFront distribution Id corresponding to the service
 * @param service
 * @param stage
 * @return
 */
def getDistributionId(stage, domain, service) {
	def distributionID
	def outputStr
	try {
		outputStr = sh (
			script: "aws cloudfront list-distributions \
				--output json \
				--query \"DistributionList.Items[?Origins.Items[?Id=='$env.env_name_prefix-$stage-static-website-origin-$domain-$service']].{Distribution:DomainName, Id:Id}\"",
			returnStdout: true
		)
		
		if(outputStr) {
			def outputObj = new JsonSlurper().parseText(outputStr)
			distributionID = outputObj[0].Id
		}

		if(distributionID == null || distributionID == "") {
			error "getDistributionId Failed. 'distributionID' is null"
		}
		return distributionID
	}catch (ex) {
		error "getDistributionId Failed. "+ex.getMessage()
	}
}

/**
 * Get and save the CloudFront distribution Config corresponding to the service
 * @param distributionID
 * @return
 */
def getDistributionConfig(distributionID) {
	def distributionConfig
	try {
		distributionConfig = sh (
			script: "aws cloudfront get-distribution-config \
						--output json --id "+distributionID,
			returnStdout: true
		)
		return distributionConfig

	}catch (ex) {
		error "getDistributionConfig Failed."+ex.getMessage()
	}

}

/**
 * Generate Disable Distribution configuration
 * @param service
 * @param stage
 * @return
 */
def generateDistributionConfigForDisable(distributionConfig) {
	def distributionConfigObj
	def eTag
	try {
		if(distributionConfig) {
			distributionConfigObj = new JsonSlurper().parseText(distributionConfig)
		}
		eTag = distributionConfigObj.ETag
		distributionConfigObj.DistributionConfig.Enabled = false
		def updatedCfg = JsonOutput.toJson(distributionConfigObj.DistributionConfig)
		echo "updatedCfg... $updatedCfg"
		try {
			sh "echo \'$updatedCfg\' > disable-cf-distribution-config.json"
		}catch(ex) {}

		return eTag
	} catch(ex) {
		error "generateDistributionConfigForDisable Failed."+ex.getMessage()
	}

}

/**
 * Disable Distribution configuration
 * @param distributionID
 * @param _Etag
 * @param configFile
 * @return
 */
def disableCloudFrontDistribution(distributionID, _Etag, configFile, stage) {
	//events.sendStartedEvent('DISABLE_CLOUDFRONT', "distributionID: "+distributionID, null, getEnvKey(stage))
	def disableOutput
	def eTag
	try {
		disableOutput = sh(
			script: "aws cloudfront update-distribution \
						--output json \
						--id $distributionID \
						--distribution-config file://"+configFile+" \
						--if-match $_Etag",
			returnStdout: true
		)
		echo "disableOutput... $disableOutput"
		if(disableOutput) {
			def disableConfigObj = new JsonSlurper().parseText(disableOutput)
			eTag = disableConfigObj.ETag
		}
		echo "disable eTag...$eTag"
		//events.sendCompletedEvent('DISABLE_CLOUDFRONT', "distributionID: "+distributionID, null, getEnvKey(stage))
		return eTag
	}catch(ex){
		//events.sendFailureEvent('DISABLE_CLOUDFRONT', ex.getMessage(), null, getEnvKey(stage))
		error "disableCloudFrontDistribution. "+ex.getMessage()
	}
}

/**
 * Delete CloudFront Distribution configuration
 * @param distributionID
 * @param _Etag
 * @return
 */
def deleteCloudFrontDistribution(distributionID, _Etag) {

	// @TODO: Send an Event with distributionID, _Etag as inputs. A separate job will pick up the details and schedule for deletion
	// @TODO: Clean up code below after that
	/*
	def deleteOutput
	try {
		deleteOutput = sh(
			script: "aws cloudfront delete-distribution \
						--id $distributionID \
						--if-match $_Etag",
			returnStdout: true
		)
		echo "deleteOutput...$deleteOutput"
		return deleteOutput

	} catch(ex) {
		error "deleteCloudFrontDistribution. "+e.getMessage()
	}
	*/
}

def loadServerlessConfig(String runtime, String configPackBBURL) {

	echo "loadServerlessConfig::" + runtime + "::" + configPackBBURL

    dir('_config') {
        checkout([$class: 'GitSCM', branches: [
            [name: '*/master']
        ], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [
            [credentialsId: env.REPO_CREDENTIAL_ID, url: configPackBBURL]
        ]])
    }

    if (runtime.indexOf("nodejs") > -1) {
        sh "cp _config/serverless-nodejs.yml ./serverless.yml"
    } else if (runtime.indexOf("java") > -1) {
        sh "cp _config/serverless-java.yml ./serverless.yml"
    } else if (runtime.indexOf("python") > -1) {
        sh "cp _config/serverless-python.yml ./serverless.yml"
    }
	sh "cp serverless.yml serverless-temp.yml"

}

def updateServiceInDB(service_id_in_db, devApiID, region, statusval) {
  if (region == null)
      region = "us-east-1"

  sh "curl -H \"Content-Type: application/json\"  -H \"Authorization: "+params.auth_token+"\" -X PUT -k -v -d '{ \"status\": \"" + statusval + "\"}' https://" + devApiID + ".execute-api." + region + ".amazonaws.com/dev/platform/services/" + service_id_in_db + "/"
}


/**
 * Checkout event module code and load the module
 */
def loadEventsModule() {
}
