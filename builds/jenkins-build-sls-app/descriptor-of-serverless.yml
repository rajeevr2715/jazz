# serverless.yml

service:
  name:
    dd-type: aws-artifact-name
    dd-render: ${configLoader.INSTANCE_PREFIX}-${config.service}
    dd-behavior: config-wins # There could have been either of three values here: config-wins, user-wins or exception-on-mismatch

  awsKmsKeyArn:
    dd-type: arn-kms
    dd-render: user-specified
    dd-values:
      dd-example: 'arn:aws:kms:us-east-1:XXXXXX:key/some-hash'

frameworkVersion:
  dd-type: str
  dd-render: user-specified
  dd-values:
    dd-default: '>=1.0.0 <2.0.0'

provider: # !!! Currently I make it user specified but it should have been rendered from the config somehow???
  name:
    dd-type: enum
    dd-render: user-specified
    dd-values:
      dd-default: aws
      dd-list:
        - aws
        - azure

  runtime:
    dd-type: enum
    dd-render: ${config.providerRuntime}
    dd-behavior: user-wins
    dd-values:
      dd-list:
      - nodejs8.10
      - java8
      - python2.7
      - python3.6
      - go1.x

  stage: # It will be setup automagically so you may not want to touch it
    dd-type: enum
    dd-render: environment_logical_id
    dd-behavior: config-wins
    dd-values:
      dd-default: dev
      dd-list:
        - dev
        - prod
        - stg

  region:
    dd-type: enum
    dd-render: ${configLoader.AWS.REGION}
    dd-behavior: user-wins
    dd-values:
      dd-default: 'us-east-1'
      dd-list:
        - 'us-east-2'
        - 'us-east-1'
        - 'us-west-1'
        - 'us-west-2'
        - 'ap-south-1'
        - 'ap-northeast-3'
        - 'ap-northeast-2'
        - 'ap-southeast-1'
        - 'ap-southeast-2'
        - 'ap-northeast-1'
        - 'ca-central-1'
        - 'cn-north-1'
        - 'cn-northwest-1'
        - 'eu-central-1'
        - 'eu-west-1'
        - 'eu-west-2'
        - 'eu-west-3'
        - 'eu-north-1'
        - 'sa-east-1'
        - 'us-gov-east-1'
        - 'us-gov-west-1'

  stackName:
    dd-type: aws-artifact-name
    dd-render: ${configLoader.INSTANCE_PREFIX}-${config.domain}-${config.service}-environment_logical_id
    dd-behavior: user-wins
    dd-values:
      dd-example: custom-stack-name # Use a custom name for the CloudFormation stack

  apiName:
    dd-type: aws-artifact-name
    dd-render: user-specified
    dd-values:
      dd-example: custom-api-name # Use a custom name for the API Gateway API

  websocketsApiName:
    dd-type: aws-artifact-name
    dd-render: user-specified
    dd-values:
      dd-example: custom-websockets-api-name # Use a custom name for the websockets API

  websocketsApiRouteSelectionExpression:
    dd-type: aws-artifact-name
    dd-render: user-specified
    dd-values:
      dd-example: $request.body.route # custom route selection expression

  profile:
    dd-type: aws-artifact-name
    dd-render: user-specified
    dd-values:
      dd-example: production # The default profile to use with this service

  memorySize:
    dd-type: int
    dd-render: ${config.providerMemorySize}
    dd-behavior: user-wins
    dd-values:
      dd-default: 1024
      dd-range:
        dd-from: 256
        dd-to: 2048

  timeout:
    dd-type: int
    dd-render: ${config.providerTimeout}
    dd-behavior: user-wins
    dd-values:
      dd-default: 6
      dd-range:
        dd-from: 5
        dd-to: 13

  logRetentionInDays:  # Set the default RetentionInDays for a CloudWatch LogGroup
    dd-type: int
    dd-render: user-specified
    dd-values:
      dd-default: 14
      dd-range:
        dd-from: 5
        dd-to: 21

  deploymentBucket: # Deployment bucket name. Default is generated by the framework
    name:
      dd-type: aws-bucket-name
      dd-render: user-specified
      dd-presense: mandatory
      dd-values:
        dd-default: ${opt:bucket}
        dd-example: com.serverless.${self:provider.region}.deploys

    serverSideEncryption:
      dd-type: enum
      dd-render: user-specified
      dd-values:
        dd-list:
          - AES-256
          - AWS-KMS

    tags: # Tags that will be added to each of the deployment resources
      dd-type: [key:value]
      dd-render: user-specified
      dd-values:
        dd-example:
          key1: value1
          key2: value2

  deploymentPrefix: # The S3 prefix under which deployed artifacts should be stored. Default is serverless
    dd-type: aws-bucket-name
    dd-render: user-specified
    dd-values:
      dd-example: serverless

  role:  # Overwrite the default IAM role which is used for all functions
    dd-type: arn-iam
    dd-render: from-config
    dd-values:
      dd-example: arn:aws:iam::XXXXXX:role/role

  cfnRole: arn:aws:iam::XXXXXX:role/role # ARN of an IAM role for CloudFormation service. If specified, CloudFormation uses the role's credentials
    dd-type: arn-iam
    dd-render: user-specified
    dd-values:
      dd-example: arn:aws:iam::XXXXXX:role/role

  versionFunctions: false # Optional function versioning
    dd-type: bool
    dd-render: user-specified
    dd-values:
      dd-example: false

  environment: # Service wide environment variables
    dd-type: [key:value]
    dd-render: user-specified
    dd-values:
      dd-example:
        serviceEnvVar: 123456789

  endpointType: # Optional endpoint configuration for API Gateway REST API. Default is Edge.
    dd-type: enum
    dd-render: user-specified
    dd-values:
      dd-list:
        - regional
        - Edge

  apiKeys: # List of API keys to be used by your service API Gateway REST API
    dd-type: array
    dd-render: user-specified
    dd-values:
      dd-example:
        - myFirstKey
        - ${opt:stage}-myFirstKey
        - ${env:MY_API_KEY} # you can hide it in a serverless variable

  apiGateway: # Optional API Gateway global config
    restApiId: # REST API resource ID. Default is generated by the framework
      dd-type: aws-id
      dd-render: user-specified
      dd-values:
        dd-example: xxxxxxxxxx

    restApiRootResourceId: # REST API resource ID. Default is generated by the framework
      dd-type: aws-id
      dd-render: user-specified
      dd-values:
        dd-example: xxxxxxxxxx

    restApiResources: # List of existing resources that were created in the REST API. This is required or the stack will be conflicted
      dd-type: [path:id]
      dd-render: user-specified
      dd-values:
        dd-example:
          '/users': xxxxxxxxxx
          '/users/create': xxxxxxxxxx

    apiKeySourceType: # Source of API key for usage plan. HEADER or AUTHORIZER.
      dd-type: enum
      dd-render: user-specified
      dd-values:
        dd-list:
          - HEADER
          - AUTHORIZER

    minimumCompressionSize: # Compress response when larger than specified size in bytes (must be between 0 and 10485760)
      dd-type: int
      dd-render: user-specified
      dd-values:
        dd-default: 1024
        dd-range:
          dd-from: 512
          dd-to: 10485760

    description: # optional description for the API Gateway stage deployment
      dd-type: str
      dd-render: user-specified
      dd-values:
        dd-example: Some Description

  usagePlan: # Optional usage plan configuration
    quota:
      limit:
        dd-type: int
        dd-render: user-specified
        dd-values:
          dd-example: 5000
      offset:
        dd-type: int
        dd-render: user-specified
        dd-values:
          dd-example: 2

      period:
        dd-type: enum
        dd-render: user-specified
        dd-values:
          dd-list:
            - MONTH
            - WEEK
            - DAY

    throttle:
      burstLimit:
        dd-type: int
        dd-render: user-specified
        dd-values:
          dd-example: 200

      rateLimit:
        dd-type: int
        dd-render: user-specified
        dd-values:
          dd-example: 100


  stackTags: # Optional CF stack tags
    dd-type: [key:value]
    dd-render: user-specified-plus
    dd-behavior: config-wins
    dd-values:
      dd-plus:
        application: ${configLoader.INSTANCE_PREFIX}
        service: ${config.service}
        domain: ${config.domain}
        owner: ${config.created_by}
        environment: ${env}
      dd-example:
        key: value

  iamManagedPolicies: # Optional IAM Managed Policies, which allows to include the policies into IAM Role
    dd-type: [arn-iam-policy]
    dd-render: ${config.iamRoleARN}
    dd-values:
      dd-example:
        - arn:aws:iam:*****:policy/some-managed-policy

  iamRoleStatements: # IAM role statements so that services can be accessed in the AWS account
    dd-type: [aws-policy]
    dd-render: user-specified
    dd-constraint: white-list
    dd-values:
        dd-example:
          - Effect: 'Allow'
            Action:
              - 's3:ListBucket'
            Resource:
              Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: ServerlessDeploymentBucket

  stackPolicy: # Optional CF stack policy. The example below allows updates to all resources except deleting/replacing EC2 instances (use with caution!)
    dd-type: [aws-policy]
    dd-render: user-specified
    dd-constraint: white-list
    dd-values:
      dd-example:
        - Effect: Allow
          Principal: "*"
          Action: "Update:*"
          Resource: "*"
        - Effect: Deny
          Principal: "*"
          Resource: "*"
          Action:
            - Update:Replace
            - Update:Delete
          Condition:
            StringEquals:
              ResourceType:
                - AWS::EC2::Instance
  vpc: # Optional VPC. But if you use VPC then both subproperties (securityGroupIds and subnetIds) are required
    securityGroupIds:
      dd-type: [aws-id]
      dd-render: user-specified
      dd-values:
        dd-example:
          - securityGroupId1
          - securityGroupId2
    subnetIds:
      dd-type: [aws-id]
      dd-render: user-specified
      dd-values:
        dd-example:
          - subnetId1
          - subnetId2
  notificationArns: # List of existing Amazon SNS topics in the same region where notifications about stack events are sent.
    dd-type: [aws-id]
    dd-render: user-specified
    dd-values:
      dd-example:
        - 'arn:aws:sns:us-east-1:XXXXXX:mytopic'

  resourcePolicy:
    dd-type: [aws-policy]
    dd-render: user-specified
    dd-constraint: white-list
    dd-values:
      dd-example:
        - Effect: Allow
          Principal: "*"
          Action: execute-api:Invoke
          Resource:
            - execute-api:/*/*/*
          Condition:
            IpAddress:
              aws:SourceIp:
                - "123.123.123.123"

  tags: # Optional service wide function tags
    dd-type: [key:value]
    dd-render: user-specified-plus
    dd-behavior: config-wins
    dd-values:
      dd-plus:
        application: ${configLoader.INSTANCE_PREFIX}
        service: ${config.service}
        domain: ${config.domain}
        owner: ${config.created_by}
        environment: ${env}
      dd-example:
        key: value

package: # Optional deployment packaging configuration
  include: # Specify the directories and files which should be included in the deployment package
    dd-type: [path]
    dd-render: user-specified
    dd-values:
      dd-examples:
        - .git/**
        - .travis.yml
  exclude: # Specify the directories and files which should be excluded in the deployment package
    dd-type: [path]
    dd-render: user-specified
    dd-values:
      dd-examples:
        - .git/**
        - .travis.yml
  excludeDevDependencies:
    dd-type: bool
    dd-render: user-specified
    dd-values:
      dd-default: false
      dd-examples: false # Config if Serverless should automatically exclude dev dependencies in the deployment package. Defaults to true
  artifact:
    dd-type: path
    dd-render: user-specified
    dd-values:
      dd-example: path/to/my-artifact.zip # Own package that should be used. You must provide this file.

  individually: # Enables individual packaging for each function. If true you must provide package for each function. Defaults to false
    dd-type: bool
    dd-render: user-specified
    dd-values:
      dd-default: false
      dd-examples: false # Config if Serverless should automatically exclude dev dependencies in the deployment package. Defaults to true

functions:
    dd-type: [name:function]
    dd-render: user-specified
    dd-values:
      dd-example:
        usersCreate: # A Function
          handler: users.create # The file and module for this specific function.
          name: ${self:provider.stage}-lambdaName # optional, Deployed Lambda name
          description: My function # The description of your function.
          memorySize: 512 # memorySize for this specific function.
          runtime: nodejs6.10 # Runtime for this specific function. Overrides the default which is set on the provider level
          timeout: 10 # Timeout for this specific function.  Overrides the default set above.
          role: arn:aws:iam::XXXXXX:role/role # IAM role which will be used for this function
          onError: arn:aws:sns:us-east-1:XXXXXX:sns-topic # Optional SNS topic / SQS arn (Ref, Fn::GetAtt and Fn::ImportValue are supported as well) which will be used for the DeadLetterConfig
          awsKmsKeyArn: arn:aws:kms:us-east-1:XXXXXX:key/some-hash # Optional KMS key arn which will be used for encryption (overwrites the one defined on the service level)
          environment: # Function level environment variables
            functionEnvVar: 12345678
          tags: # Function specific tags
            foo: bar
          vpc: # Optional VPC. But if you use VPC then both subproperties (securityGroupIds and subnetIds) are required
            securityGroupIds:
              - securityGroupId1
              - securityGroupId2
            subnetIds:
              - subnetId1
              - subnetId2
          package:
            include: # Specify the directories and files which should be included in the deployment package for this specific function.
              - src/**
              - handler.js
            exclude: # Specify the directories and files which should be excluded in the deployment package for this specific function.
              - .git/**
              - .travis.yml
            artifact: path/to/my-artifact.zip # Own package that should be use for this specific function. You must provide this file.
            individually: true # Enables individual packaging for specific function. If true you must provide package for each function. Defaults to false
          layers: # An optional list Lambda Layers to use
            - arn:aws:lambda:region:XXXXXX:layer:LayerName:Y # Layer Version ARN
          tracing: Active # optional, can be 'Active' or 'PassThrough' (overwrites the one defined on the provider level)
          events: # The Events that trigger this Function
            - websocket:
                route: $connect
                authorizer:
                  # name: auth    NOTE: you can either use "name" or arn" properties
                  arn: arn:aws:lambda:us-east-1:1234567890:function:auth
                  identitySource:
                    - 'route.request.header.Auth'
                    - 'route.request.querystring.Auth'
            - s3:
                bucket: photos
                event: s3:ObjectCreated:*
                rules:
                  - prefix: uploads/
                  - suffix: .jpg
            - schedule:
                name: my scheduled event
                description: a description of my scheduled event's purpose
                rate: rate(10 minutes)
                enabled: false
                # Note, you can use only one of input, inputPath, or inputTransformer
                input:
                  key1: value1
                  key2: value2
                  stageParams:
                    stage: dev
                inputPath: '$.stageVariables'
                inputTransformer:
                  inputPathsMap:
                    eventTime: '$.time'
                  inputTemplate: '{"time": <eventTime>, "key1": "value1"}'
            - sqs:
                arn: arn:aws:sqs:region:XXXXXX:myQueue
                batchSize: 10
            - stream:
                arn: arn:aws:kinesis:region:XXXXXX:stream/foo
                batchSize: 100
                startingPosition: LATEST
                enabled: false
            - cloudwatchEvent:
                event:
                  source:
                    - "aws.ec2"
                  detail-type:
                    - "EC2 Instance State-change Notification"
                  detail:
                    state:
                      - pending
                # Note, you can use only one of input, inputPath, or inputTransformer
                input:
                  key1: value1
                  key2: value2
                  stageParams:
                    stage: dev
                inputPath: '$.stageVariables'
                inputTransformer:
                  inputPathsMap:
                    eventTime: '$.time'
                  inputTemplate: '{"time": <eventTime>, "key1": "value1"}'
            - cloudwatchLog:
                logGroup: '/aws/lambda/hello'
                filter: '{$.userIdentity.type = Root}'

# The "Resources" your "Functions" use.  Raw AWS CloudFormation goes in here.
resources:
  Resources:
    dd-type: [name:resource]
    dd-render: user-specified
    dd-values:
      dd-example:
        usersTable:
          Type: AWS::DynamoDB::Table
          Properties:
            TableName: usersTable
            AttributeDefinitions:
              - AttributeName: email
                AttributeType: S
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    # The "Outputs" that your AWS CloudFormation Stack should produce.  This allows references between services.
  Outputs:
    dd-type: [name:output]
    dd-render: user-specified
    dd-values:
      dd-example:
        UsersTableArn:
          Description: The ARN for the User's Table
          Value:
            "Fn::GetAtt": [ usersTable, Arn ]
          Export:
            Name: ${self:service}:${opt:stage}:UsersTableArn # see Fn::ImportValue to use in other services and http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html for documentation on use.
